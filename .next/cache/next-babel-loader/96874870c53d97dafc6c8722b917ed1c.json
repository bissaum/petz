{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Layout from '../components/layout';\n\nvar DetailLink = function DetailLink(props) {\n  return /*#__PURE__*/React.createElement(Link, {\n    href: \"/detail/[id]\",\n    as: \"/detail/\".concat(props.id)\n  }, /*#__PURE__*/React.createElement(\"a\", null, props.id));\n};\n\nvar Index = function Index() {\n  return /*#__PURE__*/React.createElement(Layout, null, /*#__PURE__*/React.createElement(\"p\", null, \"Hello Next.js\"), /*#__PURE__*/React.createElement(\"ul\", null, props.shows.map(function (show) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: show.id\n    }, /*#__PURE__*/React.createElement(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id)\n    }, /*#__PURE__*/React.createElement(\"a\", null, show.name)));\n  })));\n};\n\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://api.tvmaze.com/search/shows?q=batman');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":{"version":3,"sources":["/Users/bissaum/Sites/petz/pages/index.js"],"names":["React","Link","Layout","DetailLink","props","id","Index","shows","map","show","name","getInitialProps","fetch","res","json","data","console","log","length","entry"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK;AAAA,sBACtB,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,EAAE,oBAAaA,KAAK,CAACC,EAAnB;AAA5B,kBACE,+BAAID,KAAK,CAACC,EAAV,CADF,CADsB;AAAA,CAAxB;;AAMA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,sBACE,oBAAC,MAAD,qBACE,+CADF,eAEE,gCACGF,KAAK,CAACG,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,wBACnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACJ;AAAd,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQI,IAAI,CAACJ,EAAb;AAAvB,oBACE,+BAAII,IAAI,CAACC,IAAT,CADF,CADF,CADmB;AAAA,GAApB,CADH,CAFF,CADF;AAcD,CAfD;;AAiBAJ,KAAK,CAACK,eAAN,wEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACJC,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBC,UAAAA,GADgB;AAAA;AAAA,iBAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAJsB,2CAMf;AACLX,YAAAA,KAAK,EAAEQ,IAAI,CAACP,GAAL,CAAS,UAAAW,KAAK;AAAA,qBAAIA,KAAK,CAACV,IAAV;AAAA,aAAd;AADF,WANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAWA,eAAeH,KAAf","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\n\nimport Layout from '../components/layout'\n\nconst DetailLink = props => (\n  <Link href=\"/detail/[id]\" as={`/detail/${props.id}`}>\n    <a>{props.id}</a>\n  </Link>\n)\n\nconst Index = () => {\n  return (\n    <Layout>\n      <p>Hello Next.js</p>\n      <ul>\n        {props.shows.map(show => (\n          <li key={show.id}>\n            <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n              <a>{show.name}</a>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  )\n}\n\nIndex.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman')\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}