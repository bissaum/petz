{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar List = function List(props) {\n  return /*#__PURE__*/React.createElement(Layout, null, /*#__PURE__*/React.createElement(\"h1\", null, \"Batman TV Shows\"), /*#__PURE__*/React.createElement(\"ul\", null, props.shows.map(function (show) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: show.id\n    }, /*#__PURE__*/React.createElement(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id)\n    }, /*#__PURE__*/React.createElement(\"a\", null, show.name)));\n  })));\n};\n\nList.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://api.tvmaze.com/search/shows?q=batman');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default List;","map":{"version":3,"sources":["/Users/bissaum/Sites/petz/components/List.js"],"names":["React","Link","fetch","List","props","shows","map","show","id","name","getInitialProps","res","json","data","console","log","length","entry"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,sBAChB,oBAAC,MAAD,qBACE,kDADF,eAEE,gCACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,wBACnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAd,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQD,IAAI,CAACC,EAAb;AAAvB,oBACE,+BAAID,IAAI,CAACE,IAAT,CADF,CADF,CADmB;AAAA,GAApB,CADH,CAFF,CADgB;AAAA,CAAlB;;AAeAN,IAAI,CAACO,eAAL,wEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACHR,KAAK,CAAC,8CAAD,CADF;;AAAA;AACfS,UAAAA,GADe;AAAA;AAAA,iBAEFA,GAAG,CAACC,IAAJ,EAFE;;AAAA;AAEfC,UAAAA,IAFe;AAIrBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAJqB,2CAMd;AACLX,YAAAA,KAAK,EAAEQ,IAAI,CAACP,GAAL,CAAS,UAAAW,KAAK;AAAA,qBAAIA,KAAK,CAACV,IAAV;AAAA,aAAd;AADF,WANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAWA,eAAeJ,IAAf","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\n\nconst List = props => (\n  <Layout>\n    <h1>Batman TV Shows</h1>\n    <ul>\n      {props.shows.map(show => (\n        <li key={show.id}>\n          <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n            <a>{show.name}</a>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </Layout>\n);\n\nList.getInitialProps = async function() {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default List;"]},"metadata":{},"sourceType":"module"}