{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nvar List = function List(props) {\n  return /*#__PURE__*/React.createElement(Layout, null, /*#__PURE__*/React.createElement(\"h1\", null, \"Batman TV Shows\"), /*#__PURE__*/React.createElement(\"ul\", null));\n};\n\nList.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://jsonplaceholder.typicode.com/users');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(data); // return {\n          //   shows: data.map(entry => entry.show)\n          // };\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default List;","map":{"version":3,"sources":["/Users/bissaum/Sites/petz/components/list.js"],"names":["React","Link","fetch","List","props","getInitialProps","res","json","data","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,sBAChB,oBAAC,MAAD,qBACE,kDADF,eAEE,+BAFF,CADgB;AAAA,CAAlB;;AAQAD,IAAI,CAACE,eAAL,wEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACHH,KAAK,CAAC,4CAAD,CADF;;AAAA;AACfI,UAAAA,GADe;AAAA;AAAA,iBAEFA,GAAG,CAACC,IAAJ,EAFE;;AAAA;AAEfC,UAAAA,IAFe;AAIrBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAJqB,CAMrB;AACA;AACA;;AARqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAWA,eAAeL,IAAf","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\n\nconst List = props => (\n  <Layout>\n    <h1>Batman TV Shows</h1>\n    <ul>\n    </ul>\n  </Layout>\n);\n\nList.getInitialProps = async function() {\n  const res = await fetch('https://jsonplaceholder.typicode.com/users');\n  const data = await res.json();\n\n  console.log(data);\n\n  // return {\n  //   shows: data.map(entry => entry.show)\n  // };\n};\n\nexport default List;"]},"metadata":{},"sourceType":"module"}